"""run the pede minimizer over the bin files generated by tracking"""

import os
import shutil
from typing import List

import typer

import _cmd
from _cfg import cfg
from _parameter import Parameter
from _cli import app

def getBeamspotConstraints(parMap):
    s = '\n!Beamspot constraints\n'
    for d in ['u','v','w']:
        print('d=',d)
        for t in ['t','r']:
            for iAxial in range(2):
                active = False
                print('iAx=',iAxial)
                for p, name in utils.paramMap.iteritems():
                    print('look at ', name, ' ', p)
                    if utils.getModuleNrFromDeName(name) != 0: continue
                    if (utils.isAxial(name) and iAxial==0) or (not utils.isAxial(name) and iAxial==1): continue
                    if utils.getDir(p) == d and utils.getType(p) == t:
                        print('found one',name, ' ', p)
                        if not active:
                            print('ACTIVATE')
                            s += 'Constraint 0.\n'    
                            s += '%s %.1f\n' % (p, 1.0)
                            active = True
                        else:
                            print('ADD')
                            s += '%s %.1f\n' % (p, -1.0)
    return s

def getBeamspotConstraintsFloatingOnly(pars):
    s = '\n!Beamspot constraints\n'
    written1 = 0
    written2 = 0
    written3 = 0
    written4 = 0
    written5 = 0
    written6 = 0
    for p in pars:
        line = p.toString()
        if ('98' or '99') in line:
            parNum = int(line.split()[0])
            isFloat = float(line.split()[2])
            if('1198') in line:
                if(isFloat==0): 
                    if(parNum < 20000 and written1==0):
                        s += 'Constraint 0.\n'    
                        s += '%s %.1f\n' % (parNum, 1.0)
                        s += '%s %.1f\n' % (parNum+10000, -1.0)
                        s += 'Constraint 0.\n'    
                        s += '%s %.1f\n' % (parNum+1, 1.0)
                        s += '%s %.1f\n' % (parNum+1+10000, -1.0)
                        s += '\n'
#                        s += 'Constraint 0.\n'    
#                        s += '%s %.1f\n' % (parNum, 1.0)
#                        s += '%s %.1f\n' % (parNum+1, -1.0)
#                        s += 'Constraint 0.\n'    
#                        s += '%s %.1f\n' % (parNum+10000, 1.0)
#                        s += '%s %.1f\n' % (parNum+1+10000, -1.0)
#                        s += '\n'
#                        written1 = 1
                    elif(parNum > 20000 and written1==0):
                        s += 'Constraint 0.\n'    
                        s += '%s %.1f\n' % (parNum, -1.0)
                        s += '%s %.1f\n' % (parNum-10000, 1.0)
                        s += 'Constraint 0.\n'    
                        s += '%s %.1f\n' % (parNum+1, -1.0)
                        s += '%s %.1f\n' % (parNum+1-10000, 1.0)
                        s += '\n'
#                        s += 'Constraint 0.\n'    
#                        s += '%s %.1f\n' % (parNum, -1.0)
#                        s += '%s %.1f\n' % (parNum+1, 1.0)
#                        s += 'Constraint 0.\n'    
#                        s += '%s %.1f\n' % (parNum-10000, -1.0)
#                        s += '%s %.1f\n' % (parNum+1-10000, 1.0)
#                        s += '\n'
                        written1 = 1
 
            if('2198') in line:
                if(isFloat==0): 
                    if(parNum < 20000 and written2==0):
                        s += 'Constraint 0.\n'    
                        s += '%s %.1f\n' % (parNum, 1.0)
                        s += '%s %.1f\n' % (parNum+10000, -1.0)
                        s += 'Constraint 0.\n'    
                        s += '%s %.1f\n' % (parNum+1, 1.0)
                        s += '%s %.1f\n' % (parNum+1+10000, -1.0)
                        s += '\n'
#                        s += 'Constraint 0.\n'    
#                        s += '%s %.1f\n' % (parNum, 1.0)
#                        s += '%s %.1f\n' % (parNum+1, -1.0)
#                        s += 'Constraint 0.\n'    
#                        s += '%s %.1f\n' % (parNum+10000, 1.0)
#                        s += '%s %.1f\n' % (parNum+1+10000, -1.0)
#                        s += '\n'
                        written2 = 1
                    elif(parNum > 20000 and written2==0):
                        s += 'Constraint 0.\n'    
                        s += '%s %.1f\n' % (parNum, -1.0)
                        s += '%s %.1f\n' % (parNum-10000, 1.0)
                        s += 'Constraint 0.\n'    
                        s += '%s %.1f\n' % (parNum+1, -1.0)
                        s += '%s %.1f\n' % (parNum+1-10000, 1.0)
                        s += '\n'
#                        s += 'Constraint 0.\n'    
#                        s += '%s %.1f\n' % (parNum, -1.0)
#                        s += '%s %.1f\n' % (parNum+1, 1.0)
#                        s += 'Constraint 0.\n'    
#                        s += '%s %.1f\n' % (parNum-10000, -1.0)
#                        s += '%s %.1f\n' % (parNum+1-10000, 1.0)
#                        s += '\n'
                        written2 = 1

            if('1298') in line:
                if(isFloat==0): 
                    if(parNum < 20000 and written3==0):
                        s += 'Constraint 0.\n'    
                        s += '%s %.1f\n' % (parNum, 1.0)
                        s += '%s %.1f\n' % (parNum+10000, -1.0)
                        s += 'Constraint 0.\n'    
                        s += '%s %.1f\n' % (parNum+1, 1.0)
                        s += '%s %.1f\n' % (parNum+1+10000, -1.0)
                        s += '\n'
#                        s += 'Constraint 0.\n'    
#                        s += '%s %.1f\n' % (parNum, 1.0)
#                        s += '%s %.1f\n' % (parNum+1, -1.0)
#                        s += 'Constraint 0.\n'    
#                        s += '%s %.1f\n' % (parNum+10000, 1.0)
#                        s += '%s %.1f\n' % (parNum+1+10000, -1.0)
#                        s += '\n'
                        written3 = 1
                    elif(parNum > 20000 and written3==0):
                        s += 'Constraint 0.\n'    
                        s += '%s %.1f\n' % (parNum, -1.0)
                        s += '%s %.1f\n' % (parNum-10000, 1.0)
                        s += 'Constraint 0.\n'    
                        s += '%s %.1f\n' % (parNum+1, -1.0)
                        s += '%s %.1f\n' % (parNum+1-10000, 1.0)
                        s += '\n'
#                        s += 'Constraint 0.\n'    
#                        s += '%s %.1f\n' % (parNum, -1.0)
#                        s += '%s %.1f\n' % (parNum+1, 1.0)
#                        s += 'Constraint 0.\n'    
#                        s += '%s %.1f\n' % (parNum-10000, -1.0)
#                        s += '%s %.1f\n' % (parNum+1-10000, 1.0)
                        written3 = 1

            if('2298') in line:
                if(isFloat==0): 
                    if(parNum < 20000 and written4==0):
                        s += 'Constraint 0.\n'    
                        s += '%s %.1f\n' % (parNum, 1.0)
                        s += '%s %.1f\n' % (parNum+10000, -1.0)
                        s += 'Constraint 0.\n'    
                        s += '%s %.1f\n' % (parNum+1, 1.0)
                        s += '%s %.1f\n' % (parNum+1+10000, -1.0)
                        s += '\n'
#                       s += 'Constraint 0.\n'    
#                       s += '%s %.1f\n' % (parNum, 1.0)
#                       s += '%s %.1f\n' % (parNum+1, -1.0)
#                       s += 'Constraint 0.\n'    
#                       s += '%s %.1f\n' % (parNum+10000, 1.0)
#                       s += '%s %.1f\n' % (parNum+1+10000, -1.0)
#                       s += '\n'
                        written4 = 1
                    elif(parNum > 20000 and written4==0):
                        s += 'Constraint 0.\n'    
                        s += '%s %.1f\n' % (parNum, -1.0)
                        s += '%s %.1f\n' % (parNum-10000, 1.0)
                        s += 'Constraint 0.\n'    
                        s += '%s %.1f\n' % (parNum+1, -1.0)
                        s += '%s %.1f\n' % (parNum+1-10000, 1.0)
                        s += '\n'
#                        s += 'Constraint 0.\n'    
#                        s += '%s %.1f\n' % (parNum, -1.0)
#                        s += '%s %.1f\n' % (parNum+1, 1.0)
#                        s += 'Constraint 0.\n'    
#                        s += '%s %.1f\n' % (parNum-10000, -1.0)
#                        s += '%s %.1f\n' % (parNum+1-10000, 1.0)
#                        s += '\n'
                        written4 = 1

            if('1398') in line:
                if(isFloat==0): 
                    if(parNum < 20000 and written5==0):
                        s += 'Constraint 0.\n'    
                        s += '%s %.1f\n' % (parNum, 1.0)
                        s += '%s %.1f\n' % (parNum+10000, -1.0)
                        s += 'Constraint 0.\n'    
                        s += '%s %.1f\n' % (parNum+1, 1.0)
                        s += '%s %.1f\n' % (parNum+1+10000, -1.0)
                        s += '\n'
#                        s += 'Constraint 0.\n'    
#                        s += '%s %.1f\n' % (parNum, 1.0)
#                        s += '%s %.1f\n' % (parNum+1, -1.0)
#                        s += 'Constraint 0.\n'    
#                        s += '%s %.1f\n' % (parNum+10000, 1.0)
#                        s += '%s %.1f\n' % (parNum+1+10000, -1.0)
#                        s += '\n'
                        written5 = 1
                    elif(parNum > 20000 and written5==0):
                        s += 'Constraint 0.\n'    
                        s += '%s %.1f\n' % (parNum, -1.0)
                        s += '%s %.1f\n' % (parNum-10000, 1.0)
                        s += 'Constraint 0.\n'    
                        s += '%s %.1f\n' % (parNum+1, -1.0)
                        s += '%s %.1f\n' % (parNum+1-10000, 1.0)
                        s += '\n'
#                        s += 'Constraint 0.\n'    
#                        s += '%s %.1f\n' % (parNum, -1.0)
#                        s += '%s %.1f\n' % (parNum+1, 1.0)
#                        s += 'Constraint 0.\n'    
#                        s += '%s %.1f\n' % (parNum-10000, -1.0)
#                        s += '%s %.1f\n' % (parNum+1-10000, 1.0)
#                        s += '\n'
                        written5 = 1

            if('2398') in line:
                if(isFloat==0): 
                    if(parNum < 20000 and written6==0):
                        s += 'Constraint 0.\n'    
                        s += '%s %.1f\n' % (parNum, 1.0)
                        s += '%s %.1f\n' % (parNum+10000, -1.0)
                        s += 'Constraint 0.\n'    
                        s += '%s %.1f\n' % (parNum+1, 1.0)
                        s += '%s %.1f\n' % (parNum+1+10000, -1.0)
                        s += '\n'
#                        s += 'Constraint 0.\n'    
#                        s += '%s %.1f\n' % (parNum, 1.0)
#                        s += '%s %.1f\n' % (parNum+1, -1.0)
#                        s += 'Constraint 0.\n'    
#                        s += '%s %.1f\n' % (parNum+10000, 1.0)
#                        s += '%s %.1f\n' % (parNum+1+10000, -1.0)
#                        s += '\n'
                        written6 = 1
                    elif(parNum > 20000 and written6==0):
                        s += 'Constraint 0.\n'    
                        s += '%s %.1f\n' % (parNum, -1.0)
                        s += '%s %.1f\n' % (parNum-10000, 1.0)
                        s += 'Constraint 0.\n'    
                        s += '%s %.1f\n' % (parNum+1, -1.0)
                        s += '%s %.1f\n' % (parNum+1-10000, -1.0)
                        s += '\n'
#                        s += 'Constraint 0.\n'    
#                        s += '%s %.1f\n' % (parNum, -1.0)
#                        s += '%s %.1f\n' % (parNum+1, 1.0)
#                        s += 'Constraint 0.\n'    
#                        s += '%s %.1f\n' % (parNum-10000, -1.0)
#                        s += '%s %.1f\n' % (parNum+1-10000, 1.0)
#                        s += '\n'
                        written6 = 1

    return s



def getMeasurementZ0(parMap):
    s = ''
    # Constraint:  <z0>_top + dz0_top = <z0>_bot + dz0_bot
    # i.e.  dz0_top - dz0_bot = -1 * ( <z0>_top - <z0>_bot)
    # where <z0>_top is the measured mean
    # measured z0 for top and bottom
    mean_t = 0.1
    mean_b = 0.05
    target = -1.0* ( mean_t - mean_b )
    uncertainty = 0.05
    s += '\n#z0 top/bottom constraint\nMeasurement %.3f %.3f\n' % (target, uncertainty)

    # Calculate d_top
    for p, info in utils.paramMap.iteritems():
        if utils.getDir(p) == 'u' and utils.getType(p) == 't' and utils.getHalf(int(p)) == 't':
            # stereo sensor have a cos stereo angle penalty
            # axial and stereo sensor have u in opposite directions globally
            f = 1.0/12.0 # weight from each sensor layer
            if not utils.isAxial( utils.getSensorName(p) ):
                if utils.getModuleNrFromDeName( utils.getSensorName(p) ) <= 3: st = 0.1
                else: st = 0.05
                f = -1.0 / 12.0 / math.cos(st)
            s += '%s %.3f\n' % (p, f)

    # Calculate d_bot
    # NOTE the minus sign applied applied to the factor f
    for p, info in utils.paramMap.iteritems():
        if utils.getDir(p) == 'u' and utils.getType(p) == 't' and utils.getHalf(int(p)) == 'b':
            f = 1.0/12.0
            if not utils.isAxial( utils.getSensorName(p) ):
                if utils.getModuleNrFromDeName( utils.getSensorName(p) ) <= 3: st = 0.1
                else: st = 0.05
                f = -1.0 / 12.0 *math.sin(st)
            s += '%s %.3f\n' % (p, f)
    
    return s

def getMeasurementD0(parMap):
    # similar to z0 constraint above
    s = ''
    mean_t = 0.1
    mean_b = 0.05
    target = -1.0* ( mean_t - mean_b )
    uncertainty = 0.05
    s += '\n#d0 top/bottom constraint\nMeasurement %.3f %.3f\n' % (target, uncertainty)

    # Calculate d_top
    for p, info in utils.paramMap.iteritems():
        if utils.getDir(p) == 'u' and utils.getType(p) == 't' and utils.getHalf(int(p)) == 't':
            # stereo sensor have a sin stereo angle penalty
            # axial and stereo sensor have v in same directions globally
            # axial don't contribute
            f = 1.0/6.0 # weight from each sensor layer
            if not utils.isAxial( utils.getSensorName(p) ):
                if utils.getModuleNrFromDeName( utils.getSensorName(p) ) <= 3: st = 0.1
                else: st = 0.05
                f = f/ math.cos(st)
            s += '%s %.3f\n' % (p, f)

    # Calculate d_bot
    # NOTE the minus sign applied applied to the factor f
    for p, info in utils.paramMap.iteritems():
        if utils.getDir(p) == 'u' and utils.getType(p) == 't' and utils.getHalf(int(p)) == 'b':
            f = -1.0/6.0
            if not utils.isAxial( utils.getSensorName(p) ):
                if utils.getModuleNrFromDeName( utils.getSensorName(p) ) <= 3: st = 0.1
                else: st = 0.05
                f = f * math.sin(st)
            s += '%s %.3f\n' % (p, f)
    
    return s


@app.command()
def pede(
        input_file : List[str],
        to_float : List[str] = typer.Option(..., help='parameters to float'),
        out_dir : str = typer.Option(os.getcwd(), help='directory to save output to'),
        prefix : str = typer.Option('',help='prefix to attach to files'),
        year : int = typer.Option(2019,
            help='year data was taken, determines set of parameters'),
        survey_constraints : bool = typer.Option(False,
            help='UNTESTED apply constraints from survey'),
        beamspot_constraints : bool = typer.Option(False,
            help='UNTESTED apply beam spot constraints'),
        constraint_file : str = typer.Option(None,
            help='UNTESTED optional external constraint file for pede'),
        previous_fit : str = typer.Option(None,
            help='UNTESTED optional fille containting previous pede fit solution'),
        subito : bool = typer.Option(False,
            help='add the "-s" parameter to pede')
        ) :
    """
    Run the pede minimizer over the bin files generated by tracking
    """

    # get parameters depending on year
    param_map_file = os.path.join(cfg.cfg().data_dir,'param_maps','hpsSvtParamMap.txt')
    if year == 2019 :
        param_map_file = os.path.join(cfg.cfg().data_dir,'param_maps','hpsSvtParamMap_2019.txt')

    parameters = Parameter.parse_map_file(param_map_file)

    # update parameters from previous fit
    if previous_fit is not None :
        Parameter.parse_pede_res(previous_fit, destination = previous_fit, skip_nonfloat = False)

    # define which parameters are floating
    floating = []
    for f in to_float :
        idn = None
        if f.isnumeric() :
            # string is a number, assume it is the idn
            idn = int(f)
        else:
            # look for sensor name
            for probe_id, p in parameters.items() :
                if p.name == f :
                    idn = prob_id
                    break

            if idn is None :
                raise ValueError(f'Parameter {f} not found in parameter map.')

        if idn not in parameters :
            raise ValueError(f'Parameter {idn} not found in parameter map.')

        parameters[idn].float()

    # build steering file for pede
    pede_steering_file = os.path.realpath(os.path.join(out_dir,prefix+'steer.txt'))
    with open(pede_steering_file,'w') as psf :
        # write out input mille binary files
        psf.write('CFiles\n')
        # scan each entry provided on command line,
        #  recursively entering subdiretories and including
        #  all '*.bin' files found
        for ipf in input_file :
            ipf = os.path.realpath(ipf)
            if os.path.isfile(ipf) and ipf.endswith('.bin') :
                psf.write(ipf+'\n')
            elif os.path.isdir(ipf) :
                for root, dirs, files in os.walk(ipf) :
                    for name in files :
                        if name.endswith('.bin') :
                            psf.write(os.path.join(root,name)+'\n')

        # external constraint file
        if constraint_file is not None :
            psf.write('\n')
            psf.write('!Constraint file\n')
            psf.write(constraint_file+'\n')

        # list parameters
        psf.write('\nParameter\n')
        for i, p in parameters.items() : 
            psf.write(p.pede_format() + '\n')

        # survey constraints
        if survey_constraints :
            psf.write('\n!Survey constraints tu\n')
            for p, name in param_map.items() :
                if p.module_number() == 0 :
                    continue
                if p.direction() == 'u' and p.type() == 't' :
                    psf.write('\nMeasurement 0.0 %.3f\n' % survey_meas_tu)
                    psf.write('%s 1.0\n' & p)
            psf.write("\n\n")
        
        # apply beamspotConstraint (This I think is not correct)
        if beamspot_constraints:
            #f.write(buildSteering.getBeamspotConstraints(paramMap))
            psf.write(buildSteering.getBeamspotConstraintsFloatingOnly(pars))
            psf.write("\n\n")
        
        psf.write("\n\n")
        # determine MP minimization settings
        with open(cfg.cfg().pede_minimization) as minfile :
            for line in minfile :
                psf.write(line)

    # run pede
    for ext in ['res','eve','log','his'] :
        _cmd.run(['rm','-f', f'millepede.{ext}'], 
                cwd=cfg.cfg().scratch)
    pede_cmd = [cfg.cfg().pede, pede_steering_file]
    if subito :
        pede_cmd.append('-s')
    _cmd.run(pede_cmd, cwd=cfg.cfg().scratch)

    # print parameters that were floated so user can see results
    Parameter.parse_pede_res(os.path.join(cfg.cfg().scratch,'millepede.res'),
        destination=parameters, skip_nonfloat=True)
    print('Deduced Parameters')
    for i, p in parameters.items() :
        if p.active :
            print(f'  {i}  {p.val:.6e} +- {p.error:.2e} mm')

    # move output to destination directory
    for ext in ['res','eve','log','his'] :
        f=os.path.join(cfg.cfg().scratch,f'millepede.{ext}')
        if os.path.isfile(f) :
            shutil.copy2(f,os.path.join(out_dir,prefix+f'millepede.{ext}'))

    return
    
if __name__ == '__main__' :
    app()
